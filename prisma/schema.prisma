// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                    @id @default(autoincrement())
  name              String
  email             String?                @unique
  emailVerifiedAt   DateTime?              @map("email_verified_at")
  password          String
  rememberToken     String?                @map("remember_token")
  createdAt         DateTime               @default(now()) @map("created_at")
  updatedAt         DateTime               @updatedAt @map("updated_at")
  
  // Relations
  createdForms      Form[]                 @relation("FormCreatedBy")
  updatedForms      Form[]                 @relation("FormUpdatedBy")
  createdSubmissions Submission[]          @relation("SubmissionCreatedBy")
  updatedSubmissions Submission[]          @relation("SubmissionUpdatedBy")
  
  @@map("users")
}

model PasswordResetToken {
  email     String   @id
  token     String
  createdAt DateTime? @map("created_at")
  
  @@map("password_reset_tokens")
}

model Session {
  id           String   @id
  userId       Int?     @map("user_id")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  payload      String
  lastActivity Int      @map("last_activity")
  
  @@map("sessions")
}

model Form {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(true) @map("is_public")
  schema      Json?
  createdBy   Int      @map("created_by")
  updatedBy   Int      @map("updated_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  creator     User           @relation("FormCreatedBy", fields: [createdBy], references: [id])
  updater     User           @relation("FormUpdatedBy", fields: [updatedBy], references: [id])
  submissions Submission[]
  
  @@map("forms")
}

model Submission {
  id         Int      @id @default(autoincrement())
  formId     Int      @map("form_id")
  data       Json
  createdBy  Int?     @map("created_by")
  updatedBy  Int?     @map("updated_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  form       Form                @relation(fields: [formId], references: [id], onDelete: Cascade)
  creator    User?               @relation("SubmissionCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updater    User?               @relation("SubmissionUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  tokens     SubmissionToken[]
  
  @@map("submissions")
}

model SubmissionToken {
  id           Int        @id @default(autoincrement())
  submissionId Int        @map("submission_id")
  token        String     @unique @db.VarChar(64)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  // Relations
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@map("submission_tokens")
}